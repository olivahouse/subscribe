{"version":3,"sources":["Options/styles.module.css","styles.module.css","Acuity/styles.module.css","Options/component.js","Acuity/utils/getSrc.js","Acuity/component.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","plan","parse","window","location","search","Component","onSelect","className","styles","container","id","name","description","pricePerMonth","pricePerSession","discount","map","isRecommended","Number","option","key","tag","onClick","displayName","isIndividual","providerName","SUBSCRIPTION_IDS","individual","4","3","2","couple","getSrc","planId","languageCode","owner","includes","join","onStartScheduling","onSubmit","step","handleMessage","event","data","origin","split","email","useEffect","addEventListener","removeEventListener","src","App","useState","setStep","selectedPlan","setSelectedPlan","setEmail","viewport","heading","content","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.df42f503.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__Auou0\",\"option\":\"styles_option__3NZ53\",\"isRecommended\":\"styles_isRecommended__2G63Z\",\"tag\":\"styles_tag__1cD_t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"viewport\":\"styles_viewport__E9-TC\",\"container\":\"styles_container__d38tt\",\"heading\":\"styles_heading__2--4h\",\"content\":\"styles_content__213aE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__22719\"};","import React from 'react';\nimport { parse } from 'query-string';\n\nimport styles from './styles.module.css';\n\nconst { plan } = parse(window.location.search);\n\nexport const Component = ({ onSelect }) => (\n  <div className={styles.container}>\n    {[\n      {\n        id: 4,\n        name: '4 sessions per month',\n        description: 'Break patterns, build new skills & overcome challenges.',\n        pricePerMonth: '440',\n        pricePerSession: '110',\n        discount: '9',\n      },\n      {\n        id: 3,\n        name: '3 sessions per month',\n        description:\n          'Strenghten skills, practise new habits & increase confidence',\n        pricePerMonth: '345',\n        pricePerSession: '115',\n        discount: '4',\n      },\n      {\n        id: 2,\n        name: '2 sessions per month',\n        description:\n          'Maintain a strong sense of self & be prepared for life’s challenges.',\n        pricePerMonth: '240',\n        pricePerSession: '120',\n      },\n    ].map(\n      ({ id, name, description, pricePerMonth, pricePerSession, discount }) => {\n        const isRecommended = Number(plan) === id;\n\n        return (\n          <div\n            className={`${styles.option} ${\n              isRecommended && styles.isRecommended\n            }`}\n            key={id}\n          >\n            {isRecommended && (\n              <h5 className={styles.tag}>\n                Ginnette recommends this plan for you\n              </h5>\n            )}\n            <h4>{name}</h4>\n            <p>{description}</p>\n            <h2>£{pricePerMonth} / month</h2>\n            <h6>\n              £{pricePerSession} / session{' '}\n              {discount && <span>+{discount}% discount</span>}\n            </h6>\n            <button onClick={() => onSelect(id)}>Select</button>\n          </div>\n        );\n      }\n    )}\n  </div>\n);\n\nComponent.displayName = 'Options';\n","import { parse } from 'query-string';\n\nconst { isIndividual, providerName } = parse(window.location.search);\n\nconst SUBSCRIPTION_IDS = {\n  ['Alan Watts']: {\n    individual: {\n      4: 896592,\n      3: 896595,\n      2: 896596,\n    },\n    couple: {\n      4: 896598,\n      3: 896599,\n      2: 896600,\n    },\n  },\n};\n\nexport const getSrc = (planId, languageCode = 'en') => {\n  const owner = languageCode.includes('es') ? 20408348 : 20088051;\n\n  const id =\n    SUBSCRIPTION_IDS[providerName][\n      isIndividual === 'true' ? 'individual' : 'couple'\n    ][planId];\n\n  return [\n    'https://app.acuityscheduling.com/catalog.php',\n    `?owner=${owner}`,\n    `&id=${id}`,\n    '&action=addCart',\n    '&clear=1',\n  ].join('');\n};\n","import React, { useEffect } from 'react';\n\nimport { getSrc } from './utils/getSrc';\nimport styles from './styles.module.css';\n\nexport const Component = ({ onStartScheduling, onSubmit, planId, step }) => {\n  const handleMessage = (event) => {\n    if (!event || !event.data || !event.origin.includes('acuity')) return;\n\n    if (event.data.includes('acuity-appointment-scheduled')) {\n      const [, email] = event.data.split(' ');\n\n      onSubmit(email);\n    }\n\n    if (step === 2 && event.data.includes('domtext:init')) {\n      onStartScheduling();\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n\n    return () => window.removeEventListener('message', handleMessage);\n  }, []);\n\n  return (\n    <div className={styles.container}>\n      {planId && <iframe src={getSrc(planId)} />}\n    </div>\n  );\n};\n\nComponent.displayName = 'Acuity';\n","import React, { useState } from 'react';\n\nimport { Options } from './Options';\nimport { Acuity } from './Acuity';\nimport './App.css';\nimport styles from './styles.module.css';\n\nconst App = () => {\n  const [step, setStep] = useState(0);\n  const [selectedPlan, setSelectedPlan] = useState(null);\n  const [email, setEmail] = useState(null);\n\n  const handleSelectPlan = (planId) => {\n    setSelectedPlan(planId);\n    setStep(1);\n  };\n\n  const handleSubmitAcuity = (email) => {\n    setEmail(email);\n    setStep(2);\n  };\n\n  const handleStartScheduling = () => {\n    setStep(3);\n  };\n\n  return (\n    <div className={styles.viewport}>\n      <div className={styles.container}>\n        <h3 className={styles.heading}>\n          {\n            [\n              'First, choose a subscription plan:',\n              'Next, confirm your details and pay:',\n              `Thanks! We sent a confirmation to ${email}`,\n              'Pick a time for your first session',\n            ][step]\n          }\n        </h3>\n        <div className={styles.content}>\n          {step === 0 && <Options onSelect={handleSelectPlan} />}\n          {[1, 2].includes(step) && (\n            <Acuity\n              onStartScheduling={handleStartScheduling}\n              onSubmit={handleSubmitAcuity}\n              planId={selectedPlan}\n              step={step}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}